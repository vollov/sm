https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code/working-with-git/

Your GitHub repository will be called “origin” in Git.

You should also setup django/django as an “upstream” remote (that is, tell git that the reference Django repository was the source of your fork of it):

git remote add upstream git@github.com:django/django.git
git fetch upstream
You can add other remotes similarly, for example:

git remote add akaariai git@github.com:akaariai/django.git
Working on a ticket¶

When working on a ticket create a new branch for the work, and base that work on upstream/master:

git checkout -b ticket_xxxxx upstream/master
-------------------------------
The -b flag creates a new branch for you locally. Don’t hesitate to create new branches even for the smallest things - that’s what they are there for.

If instead you were working for a fix on the 1.4 branch, you would do:

git checkout -b ticket_xxxxx_1_4 upstream/stable/1.4.x
-------------------------------
Assume the work is carried on ticket_xxxxx branch. Make some changes and commit them:

git commit
When writing the commit message, follow the commit message guidelines to ease the work of the committer. If you’re uncomfortable with English, try at least to describe precisely what the commit does.

If you need to do additional work on your branch, commit as often as necessary:

git commit -m 'Added two more tests for edge cases'
Publishing work¶

You can publish your work on GitHub just by doing:

git push origin ticket_xxxxx